{
    "posts": [
        {
            "id": 1,
            "title": "探索CSS Grid布局",
            "excerpt": "CSS Grid布局是现代网页设计中最强大的布局系统之一。在这篇文章中，我们将探索它的基本概念和使用方法。",
            "content": "<p>CSS Grid布局是现代网页设计中最强大的布局系统之一。它允许我们创建复杂的二维布局，而无需使用浮动或定位。</p><p>Grid布局由父元素（称为Grid容器）和子元素（称为Grid项）组成。通过定义行和列，我们可以精确控制每个项目的位置和大小。</p><p>一些常用的Grid属性包括：</p><ul><li>grid-template-columns: 定义列</li><li>grid-template-rows: 定义行</li><li>grid-gap: 定义间距</li><li>grid-area: 定义项目位置</li></ul>",
            "date": "2023-05-15",
            "tags": ["CSS", "前端"]
        },
        {
            "id": 2,
            "title": "JavaScript异步编程",
            "excerpt": "深入了解JavaScript中的异步编程模式，包括回调、Promise和async/await。",
            "content": "<p>JavaScript是单线程语言，但通过异步编程模式，我们可以处理耗时操作而不会阻塞主线程。</p><p>早期的异步编程使用回调函数，但这会导致所谓的'回调地狱'。ES6引入了Promise，提供了更优雅的解决方案。</p><p>ES2017进一步引入了async/await语法，使异步代码看起来像同步代码一样直观。</p><p>示例：</p><pre><code>async function fetchData() {\n  try {\n    const response = await fetch('api/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}</code></pre>",
            "date": "2023-06-20",
            "tags": ["JavaScript", "前端"]
        },
        {
            "id": 3,
            "title": "响应式设计最佳实践",
            "excerpt": "在移动设备普及的今天，响应式设计已成为网页开发的标准。本文分享一些响应式设计的最佳实践。",
            "content": "<p>响应式设计确保网页在各种设备上都能提供良好的用户体验。以下是一些最佳实践：</p><ol><li>移动优先：从小屏幕开始设计，然后逐步增强</li><li>使用相对单位（如rem、%）而非固定像素</li><li>实现灵活的网格布局</li><li>使用媒体查询针对不同屏幕尺寸调整样式</li><li>优化图片和媒体资源</li><li>测试在各种设备上的显示效果</li></ol><p>记住，响应式设计不仅仅是调整布局，还需要考虑性能、触摸交互等因素。</p>",
            "date": "2023-07-10",
            "tags": ["CSS", "响应式设计"]
        },
        {
            "id": 4,
            "title": "Vue 3组合式API入门",
            "excerpt": "Vue 3引入了组合式API，这是一种更灵活的组织组件逻辑的方式。本文将介绍其基本用法。",
            "content": "<p>Vue 3的组合式API是对选项式API的补充，它允许我们基于逻辑而非选项组织代码。</p><p>组合式API的核心是setup函数，它在组件创建之前执行，接收props和context作为参数。</p><p>在setup函数中，我们可以使用ref和reactive创建响应式数据，使用computed创建计算属性，使用watch和watchEffect创建副作用。</p><p>组合式API的一个主要优势是逻辑复用。我们可以将相关逻辑提取到组合函数中，然后在多个组件中重用。</p><p>示例：</p><pre><code>import { ref, onMounted } from 'vue';\n\nexport default {\n  setup() {\n    const count = ref(0);\n    \n    function increment() {\n      count.value++;\n    }\n    \n    onMounted(() => {\n      console.log('Component mounted');\n    });\n    \n    return {\n      count,\n      increment\n    };\n  }\n}</code></pre>",
            "date": "2023-08-05",
            "tags": ["Vue", "前端"]
        },
        {
            "id": 5,
            "title": "Node.js性能优化技巧",
            "excerpt": "分享一些提升Node.js应用性能的实用技巧，包括事件循环、集群模式和缓存策略。",
            "content": "<p>Node.js以其高性能著称，但在高负载场景下仍需要优化。以下是一些性能优化技巧：</p><ol><li>避免阻塞事件循环：将CPU密集型任务分流到工作线程或子进程</li><li>使用集群模式充分利用多核CPU</li><li>实现适当的缓存策略（内存缓存、Redis等）</li><li>优化数据库查询（索引、连接池）</li><li>使用流处理大文件</li><li>启用Gzip压缩</li><li>监控和分析性能瓶颈</li></ol><p>记住，过早优化是万恶之源。应先识别性能瓶颈，再有针对性地优化。</p>",
            "date": "2023-09-12",
            "tags": ["Node.js", "后端"]
        },
        {
            "id": 6,
            "title": "Web安全基础",
            "excerpt": "了解常见的Web安全威胁及其防范措施，包括XSS、CSRF和SQL注入等。",
            "content": "<p>Web安全是每个开发者都应该重视的话题。以下是常见的安全威胁及防范措施：</p><h3>1. XSS (跨站脚本攻击)</h3><p>攻击者注入恶意脚本到网页中。防范措施：</p><ul><li>对用户输入进行转义</li><li>使用Content Security Policy (CSP)</li><li>设置HttpOnly标志的cookie</li></ul><h3>2. CSRF (跨站请求伪造)</h3><p>攻击者诱导用户执行非预期的操作。防范措施：</p><ul><li>使用CSRF令牌</li><li>检查Referer头</li><li>SameSite cookie属性</li></ul><h3>3. SQL注入</h3><p>攻击者通过输入恶意SQL语句操纵数据库。防范措施：</p><ul><li>使用参数化查询</li><li>使用ORM库</li><li>最小化数据库权限</li></ul>",
            "date": "2001-10-08",
            "tags": ["安全", "全栈"]
        }
    ]
}